// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Hotel_1.Models
{
    public partial class HotelContext : DbContext
    {
        public HotelContext()
        {
        }

        public HotelContext(DbContextOptions<HotelContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<BankCard> BankCards { get; set; }
        public virtual DbSet<BillsHotel> BillsHotels { get; set; }
        public virtual DbSet<BillsHotelDetail> BillsHotelDetails { get; set; }
        public virtual DbSet<BillsService> BillsServices { get; set; }
        public virtual DbSet<BillsServiceDetail> BillsServiceDetails { get; set; }
        public virtual DbSet<BookingHistory> BookingHistories { get; set; }
        public virtual DbSet<Hotel> Hotels { get; set; }
        public virtual DbSet<HotelBooking> HotelBookings { get; set; }
        public virtual DbSet<HotelImage> HotelImages { get; set; }
        public virtual DbSet<HotelReview> HotelReviews { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Reservation> Reservations { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomImage> RoomImages { get; set; }
        public virtual DbSet<RoomReview> RoomReviews { get; set; }
        public virtual DbSet<RoomReviewImage> RoomReviewImages { get; set; }
        public virtual DbSet<RoomType> RoomTypes { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceBooking> ServiceBookings { get; set; }
        public virtual DbSet<ServiceImage> ServiceImages { get; set; }
        public virtual DbSet<ServiceReview> ServiceReviews { get; set; }
        public virtual DbSet<ServicesReviewImage> ServicesReviewImages { get; set; }
        public virtual DbSet<Social> Socials { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => e.AccountName)
                    .HasName("PK__Accounts__6894C54B58F0FB64");

                entity.Property(e => e.AccountName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.AvatarUrl)
                    .IsUnicode(false)
                    .HasColumnName("Avatar_URl");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(128)
                    .HasColumnName("first_name");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("last_name");

                entity.Property(e => e.PasswordHash)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("password_hash");

                entity.Property(e => e.Phone)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("role");

                entity.Property(e => e.UpdateAt)
                    .HasColumnType("datetime")
                    .HasColumnName("Update_At");
            });

            modelBuilder.Entity<BankCard>(entity =>
            {
                entity.HasKey(e => e.CardId)
                    .HasName("PK__Bank_Car__BDF201DD330CB07C");

                entity.ToTable("Bank_Card");

                entity.Property(e => e.CardId).HasColumnName("card_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.CardCvv)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("card_cvv");

                entity.Property(e => e.CardName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("card_name");

                entity.Property(e => e.CardNumber)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("card_number");

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasColumnName("create_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpirationDate)
                    .HasColumnType("date")
                    .HasColumnName("expiration_date");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.BankCards)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bank_Card__creat__6A30C649");
            });

            modelBuilder.Entity<BillsHotel>(entity =>
            {
                entity.HasKey(e => e.BillHotelId)
                    .HasName("PK__Bills_Ho__FD792E1FE46CDA7D");

                entity.ToTable("Bills_Hotel");

                entity.Property(e => e.BillHotelId).HasColumnName("bill_hotel_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.HotelBookingId).HasColumnName("hotel_booking_id");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasColumnName("order_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Status)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("total_amount");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.BillsHotels)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bills_Hot__accou__5535A963");

                entity.HasOne(d => d.HotelBooking)
                    .WithMany(p => p.BillsHotels)
                    .HasForeignKey(d => d.HotelBookingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bills_Hot__hotel__5629CD9C");
            });

            modelBuilder.Entity<BillsHotelDetail>(entity =>
            {
                entity.HasKey(e => e.BillHotelDetailId)
                    .HasName("PK__Bills_Ho__5EDCD0FEAB586B8D");

                entity.ToTable("Bills_Hotel_Details");

                entity.Property(e => e.BillHotelDetailId).HasColumnName("bill_hotel_detail_id");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.BillHotelId).HasColumnName("bill_hotel_id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.RoomId).HasColumnName("room_id");

                entity.HasOne(d => d.BillHotel)
                    .WithMany(p => p.BillsHotelDetails)
                    .HasForeignKey(d => d.BillHotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bills_Hot__bill___59063A47");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.BillsHotelDetails)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bills_Hot__room___59FA5E80");
            });

            modelBuilder.Entity<BillsService>(entity =>
            {
                entity.HasKey(e => e.BillServiceId)
                    .HasName("PK__Bills_Se__B6028E86BAAEE512");

                entity.ToTable("Bills_Service");

                entity.Property(e => e.BillServiceId).HasColumnName("bill_service_id");

                entity.Property(e => e.BillHotelId).HasColumnName("bill_hotel_id");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("price");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.ServiceBookingId).HasColumnName("service_booking_id");

                entity.HasOne(d => d.BillHotel)
                    .WithMany(p => p.BillsServices)
                    .HasForeignKey(d => d.BillHotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bills_Ser__bill___5CD6CB2B");

                entity.HasOne(d => d.ServiceBooking)
                    .WithMany(p => p.BillsServices)
                    .HasForeignKey(d => d.ServiceBookingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bills_Ser__servi__5DCAEF64");
            });

            modelBuilder.Entity<BillsServiceDetail>(entity =>
            {
                entity.HasKey(e => e.BillServiceDetailId)
                    .HasName("PK__Bills_Se__3D76A0B83D4F268F");

                entity.ToTable("Bills_Service_Details");

                entity.Property(e => e.BillServiceDetailId).HasColumnName("bill_service_detail_id");

                entity.Property(e => e.Amount)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("amount");

                entity.Property(e => e.BillServiceId).HasColumnName("bill_service_id");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("description");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.HasOne(d => d.BillService)
                    .WithMany(p => p.BillsServiceDetails)
                    .HasForeignKey(d => d.BillServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bills_Ser__bill___60A75C0F");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.BillsServiceDetails)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Bills_Ser__servi__619B8048");
            });

            modelBuilder.Entity<BookingHistory>(entity =>
            {
                entity.ToTable("Booking_History");

                entity.Property(e => e.BookingHistoryId).HasColumnName("booking_history_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.BookingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("booking_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HotelBookingId).HasColumnName("hotel_booking_id");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.BookingHistories)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Booking_H__accou__3A81B327");

                entity.HasOne(d => d.HotelBooking)
                    .WithMany(p => p.BookingHistories)
                    .HasForeignKey(d => d.HotelBookingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Booking_H__hotel__3B75D760");
            });

            modelBuilder.Entity<Hotel>(entity =>
            {
                entity.Property(e => e.HotelId).HasColumnName("hotel_id");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("address");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("city");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.District)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("district");

                entity.Property(e => e.HotelName)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("hotel_name");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("state");
            });

            modelBuilder.Entity<HotelBooking>(entity =>
            {
                entity.ToTable("Hotel_Bookings");

                entity.Property(e => e.HotelBookingId).HasColumnName("hotel_booking_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.CheckInDate)
                    .HasColumnType("date")
                    .HasColumnName("check_in_date");

                entity.Property(e => e.CheckOutDate)
                    .HasColumnType("date")
                    .HasColumnName("check_out_date");

                entity.Property(e => e.CreateAt)
                    .HasColumnType("datetime")
                    .HasColumnName("create_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HotelId).HasColumnName("hotel_id");

                entity.Property(e => e.RoomId).HasColumnName("room_id");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("status");

                entity.Property(e => e.TotalPrice)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("total_price");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.HotelBookings)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Hotel_Boo__accou__34C8D9D1");

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.HotelBookings)
                    .HasForeignKey(d => d.HotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Hotel_Boo__hotel__36B12243");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.HotelBookings)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Hotel_Boo__room___35BCFE0A");
            });

            modelBuilder.Entity<HotelImage>(entity =>
            {
                entity.HasKey(e => e.HotelImagesId)
                    .HasName("PK__Hotel_Im__039E3CC9674E1EC0");

                entity.ToTable("Hotel_Images");

                entity.Property(e => e.HotelImagesId).HasColumnName("Hotel_Images_id");

                entity.Property(e => e.HotelId).HasColumnName("hotel_id");

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("image_url");

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.HotelImages)
                    .HasForeignKey(d => d.HotelId)
                    .HasConstraintName("FK__Hotel_Ima__hotel__15502E78");
            });

            modelBuilder.Entity<HotelReview>(entity =>
            {
                entity.ToTable("Hotel_Reviews");

                entity.Property(e => e.HotelReviewId).HasColumnName("hotel_review_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.HotelId).HasColumnName("hotel_id");

                entity.Property(e => e.Rating).HasColumnName("rating");

                entity.Property(e => e.ReviewDate)
                    .HasColumnType("datetime")
                    .HasColumnName("review_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReviewText)
                    .HasColumnType("text")
                    .HasColumnName("review_text");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.HotelReviews)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Hotel_Rev__accou__1A14E395");

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.HotelReviews)
                    .HasForeignKey(d => d.HotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Hotel_Rev__hotel__1B0907CE");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.Property(e => e.NotificationId).HasColumnName("notification_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasColumnType("text")
                    .HasColumnName("content");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsRead).HasColumnName("is_read");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("role");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("title");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Notificat__accou__6EF57B66");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.Property(e => e.PaymentId).HasColumnName("payment_id");

                entity.Property(e => e.HotelBookingId).HasColumnName("hotel_booking_id");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("payment_amount");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("payment_date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PaymentMethod)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("payment_method");

                entity.Property(e => e.ServiceBookingId).HasColumnName("service_booking_id");

                entity.HasOne(d => d.HotelBooking)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.HotelBookingId)
                    .HasConstraintName("FK__Payments__hotel___656C112C");

                entity.HasOne(d => d.ServiceBooking)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.ServiceBookingId)
                    .HasConstraintName("FK__Payments__servic__66603565");
            });

            modelBuilder.Entity<Reservation>(entity =>
            {
                entity.Property(e => e.ReservationId).HasColumnName("reservation_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.ReservationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("reservation_date");

                entity.Property(e => e.ReservationType)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("reservation_type");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("status");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.Reservations)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Reservati__accou__46E78A0C");
            });

            modelBuilder.Entity<Room>(entity =>
            {
                entity.Property(e => e.RoomId).HasColumnName("room_id");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.MaxOccupancy).HasColumnName("max_occupancy");

                entity.Property(e => e.PricePerNight)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("price_per_night");

                entity.Property(e => e.RoomTypeId).HasColumnName("room_type_id");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.HasOne(d => d.RoomType)
                    .WithMany(p => p.Rooms)
                    .HasForeignKey(d => d.RoomTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rooms__room_type__29572725");
            });

            modelBuilder.Entity<RoomImage>(entity =>
            {
                entity.HasKey(e => e.ImageId)
                    .HasName("PK__Room_Ima__DC9AC9555043BC0A");

                entity.ToTable("Room_Images");

                entity.Property(e => e.ImageId).HasColumnName("image_id");

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("image_url");

                entity.Property(e => e.RoomId).HasColumnName("room_id");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.RoomImages)
                    .HasForeignKey(d => d.RoomId)
                    .HasConstraintName("FK__Room_Imag__room___2C3393D0");
            });

            modelBuilder.Entity<RoomReview>(entity =>
            {
                entity.ToTable("Room_Reviews");

                entity.Property(e => e.RoomReviewId).HasColumnName("room_review_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.Rating).HasColumnName("rating");

                entity.Property(e => e.ReviewDate)
                    .HasColumnType("date")
                    .HasColumnName("review_date");

                entity.Property(e => e.ReviewText)
                    .HasColumnType("text")
                    .HasColumnName("review_text");

                entity.Property(e => e.RoomId).HasColumnName("room_id");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.RoomReviews)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Room_Revi__accou__300424B4");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.RoomReviews)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Room_Revi__room___30F848ED");
            });

            modelBuilder.Entity<RoomReviewImage>(entity =>
            {
                entity.ToTable("Room_Review_Images");

                entity.Property(e => e.RoomReviewImageId).HasColumnName("room_review_image_id");

                entity.Property(e => e.ImageUrl)
                    .IsUnicode(false)
                    .HasColumnName("image_url");

                entity.Property(e => e.RoomReviewId).HasColumnName("room_review_id");

                entity.HasOne(d => d.RoomReview)
                    .WithMany(p => p.RoomReviewImages)
                    .HasForeignKey(d => d.RoomReviewId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Room_Revi__room___3E52440B");
            });

            modelBuilder.Entity<RoomType>(entity =>
            {
                entity.ToTable("Room_Types");

                entity.Property(e => e.RoomTypeId).HasColumnName("room_type_id");

                entity.Property(e => e.HotelId).HasColumnName("hotel_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("type_name");

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.RoomTypes)
                    .HasForeignKey(d => d.HotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Room_Type__hotel__25869641");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.Description)
                    .HasColumnType("text")
                    .HasColumnName("description");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("service_name");

                entity.Property(e => e.ServicePrice)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("service_price");
            });

            modelBuilder.Entity<ServiceBooking>(entity =>
            {
                entity.ToTable("Service_Bookings");

                entity.Property(e => e.ServiceBookingId).HasColumnName("service_booking_id");

                entity.Property(e => e.HotelBookingId).HasColumnName("hotel_booking_id");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.Property(e => e.TotalPrice)
                    .HasColumnType("decimal(10, 2)")
                    .HasColumnName("total_price");

                entity.HasOne(d => d.HotelBooking)
                    .WithMany(p => p.ServiceBookings)
                    .HasForeignKey(d => d.HotelBookingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Service_B__hotel__4316F928");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceBookings)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Service_B__servi__440B1D61");
            });

            modelBuilder.Entity<ServiceImage>(entity =>
            {
                entity.HasKey(e => e.ImageId)
                    .HasName("PK__Service___DC9AC955FFE044AC");

                entity.ToTable("Service_Images");

                entity.Property(e => e.ImageId).HasColumnName("image_id");

                entity.Property(e => e.ImageUrl)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("image_url");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceImages)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK__Service_I__servi__49C3F6B7");
            });

            modelBuilder.Entity<ServiceReview>(entity =>
            {
                entity.ToTable("Service_Reviews");

                entity.Property(e => e.ServiceReviewId).HasColumnName("service_review_id");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("account_name");

                entity.Property(e => e.Rating).HasColumnName("rating");

                entity.Property(e => e.ReviewDate)
                    .HasColumnType("date")
                    .HasColumnName("review_date");

                entity.Property(e => e.ReviewText)
                    .HasColumnType("text")
                    .HasColumnName("review_text");

                entity.Property(e => e.ServiceId).HasColumnName("service_id");

                entity.HasOne(d => d.AccountNameNavigation)
                    .WithMany(p => p.ServiceReviews)
                    .HasForeignKey(d => d.AccountName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Service_R__accou__4D94879B");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceReviews)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Service_R__servi__4E88ABD4");
            });

            modelBuilder.Entity<ServicesReviewImage>(entity =>
            {
                entity.ToTable("Services_Review_Images");

                entity.Property(e => e.ServicesReviewImageId).HasColumnName("services_review_image_id");

                entity.Property(e => e.ImageUrl)
                    .IsUnicode(false)
                    .HasColumnName("image_url");

                entity.Property(e => e.ServiceReviewId).HasColumnName("service_review_id");

                entity.HasOne(d => d.ServiceReview)
                    .WithMany(p => p.ServicesReviewImages)
                    .HasForeignKey(d => d.ServiceReviewId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Services___servi__5165187F");
            });

            modelBuilder.Entity<Social>(entity =>
            {
                entity.ToTable("Social");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.HotelId).HasColumnName("hotel_id");

                entity.Property(e => e.LinkUrl)
                    .IsUnicode(false)
                    .HasColumnName("Link_URL");

                entity.HasOne(d => d.Hotel)
                    .WithMany(p => p.Socials)
                    .HasForeignKey(d => d.HotelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Social__hotel_id__22AA2996");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}